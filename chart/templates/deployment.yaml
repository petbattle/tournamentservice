{{- if (eq .Values.deployment true) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pet-battle-tournament.fullname" . }}
  labels:
    {{- include "pet-battle-tournament.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
        {{- include "pet-battle-tournament.selectorLabels" . | nindent 8 }}
  template:
    metadata:
      annotations:
        image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"{{ include "pet-battle-tournament.fullname" . }}:{{ .Values.image_version }}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"pet-battle-tournament\")].image"}]'
        alpha.image.policy.openshift.io/resolve-names: '*'
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '8080'
        rollme: {{ randAlphaNum 5 | quote }}
        {{- if .Values.istio.enabled }}
        sidecar.istio.io/inject: "true"
        traffic.sidecar.istio.io/excludeOutboundPorts: "27017"
        proxy.istio.io/config: |
          tracing:
            sampling: 100.0
        {{- end}}
      creationTimestamp: null
      labels:
        {{- include "pet-battle-tournament.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - env:
            - name: JAVA_OPTIONS
              value: -Dquarkus.infinispan-client.trust-store=/deployments/config/truststore.jks -Djavax.net.ssl.trustStore=/deployments/config/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.jkspassword }}
            - name: oidcvar
              valueFrom:
                secretKeyRef:
                  key: OIDCVAR
                  name: {{ include "pet-battle-tournament.fullname" . }}
            {{- if .Values.mongodbTemplate.enabled }}
            - name: DATABASE_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-admin-password
                  name: {{ include "mongodb.fullname" . }}
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: {{ include "mongodb.fullname" . }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: {{ include "mongodb.fullname" . }}
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: {{ include "mongodb.fullname" . }}
            - name: DATABASE_SERVICE_HOST
              value: {{ include "mongodb.fullname" . }}
            - name: DATABASE_SERVICE_PORT
              value: '27017'
            {{- end }}
            {{- if .Values.infinispan.enabled }}
            - name: INFINISPAN_SERVICE_HOST
              value: {{.Values.infinispan.service }}
            - name: INFINISPAN_SERVICE_PORT
              value: '11222'
            - name: INFINISPAN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: INFINISPAN_PASSWORD
                  name: infinispan-auth
            - name: INFINISPAN_REALM
              value: {{.Values.infinispan.realm }}
            - name: INFINISPAN_USER
              valueFrom:
                secretKeyRef:
                  key: INFINISPAN_USER
                  name: infinispan-auth
            {{- end }}
            - name: QUARKUS_PROFILE
              value: prod
          image: ' '
          imagePullPolicy: Always
          name: {{ include "pet-battle-tournament.name" . }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /deployments/config/
              name: javatruststorevol
              readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 384
            name: java-truststore
          name: javatruststorevol
{{- end }}
